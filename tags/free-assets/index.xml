<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Don&#39;t Think Too Much</title>
    <link>https://randyyaj.github.io/tags/free-assets/index.xml</link>
    <description>Recent content on Don&#39;t Think Too Much</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://randyyaj.github.io/tags/free-assets/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Springboot with Impala and Kudu</title>
      <link>https://randyyaj.github.io/post/20161128_kudu_impala_spring/</link>
      <pubDate>Mon, 28 Nov 2016 20:52:19 -0400</pubDate>
      
      <guid>https://randyyaj.github.io/post/20161128_kudu_impala_spring/</guid>
      <description>

&lt;h3 id=&#34;how-to-run-this-app&#34;&gt;How to run this app&lt;/h3&gt;

&lt;p&gt;Please follow the instructions below to get kudu running locally with java and impala driver.&lt;/p&gt;

&lt;h3 id=&#34;download-the-kudu-quickstart-vm&#34;&gt;Download the kudu quickstart VM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://kudu.apache.org/releases/&#34;&gt;Kudu Quick Start VM&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create-the-department-file-to-load&#34;&gt;Create the department file to load&lt;/h3&gt;

&lt;p&gt;You can use this python script to create the department file to load: name it generate.py&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/local/bin/python3
default_path = &#39;/Users/ryang1/Desktop&#39;
def generateDepartmentMasterFile():
    &amp;quot;&amp;quot;&amp;quot;
    Company Id | Department Code | Department Description
    &amp;quot;&amp;quot;&amp;quot;
    file = open(default_path+&#39;/dept.txt&#39;,&#39;a&#39;)
    for x in range (1,501):
        file.write(&#39;Company{0}|{0}|Dept{0} 
Description\n&#39;.format(str(x)))
generateDepartmentMasterFile()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 generate.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;load-the-department-file&#34;&gt;Load the department file&lt;/h3&gt;

&lt;p&gt;Start your kudu quickstart VM. Once it has started run this command to find the vm ip. Should start with 192.168.***&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ip addr show
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[demo@quickstart ~]$ ip addr show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 16436 qdisc noqueue 
state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc 
pfifo_fast state UP qlen 1000
    link/ether 08:00:27:8a:40:9a brd ff:ff:ff:ff:ff:ff
    inet 192.168.57.100/24 brd 192.168.57.255 scope global 
eth0
3: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc 
pfifo_fast state UP qlen 1000
    link/ether 08:00:27:16:94:b5 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.15/24 brd 10.0.3.255 scope global eth1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you figure out your vm ip address, we will copy over the dept.txt file we created earlier with the python script and put it into hdfs.&lt;/p&gt;

&lt;p&gt;ssh username:demo password:demo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scp dept.txt demo@192.168.57.100:~/
$ ssh demo@192.168.57.100
$ hdfs dfs -put -f dept.txt /data/dept
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-department-table-in-kudu-impala&#34;&gt;Create the department table in kudu/impala&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTERNAL TABLE department_raw (
    company_id string,
    department_code int,
    department_description string)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY &#39;|&#39;
    LOCATION &#39;/data/dept/&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE department
DISTRIBUTE BY HASH (company_id) INTO 16 BUCKETS
TBLPROPERTIES(
&#39;storage_handler&#39; = 
&#39;com.cloudera.kudu.hive.KuduStorageHandler&#39;,
&#39;kudu.table_name&#39; = &#39;department&#39;,
&#39;kudu.master_addresses&#39; = &#39;127.0.0.1&#39;,
&#39;kudu.key_columns&#39; = &#39;company_id&#39;
 ) AS SELECT * FROM department_raw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# Set the database configuration&lt;/p&gt;

&lt;p&gt;In the project search for src/main/java/config/DatabaseConfig.java and set the datasource url to your kudu/impala VM url&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Bean(name=&amp;quot;dataSource&amp;quot;)
public DataSource dataSource() {
    DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
    
    //CHANGE ME!
    dataSourceBuilder.url(&amp;quot;jdbc:impala://192.168.57.100:21050&amp;quot;);
    
    dataSourceBuilder.username(&amp;quot;demo&amp;quot;);
    dataSourceBuilder.password(&amp;quot;demo&amp;quot;);
    dataSourceBuilder.driverClassName(&amp;quot;com.cloudera.impala.jdbc4.Driver&amp;quot;);
    return dataSourceBuilder.build();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setting-up-intellij&#34;&gt;Setting up intellij&lt;/h1&gt;

&lt;p&gt;In order to run the spring boot app you will need to set the run configuration
Run -&amp;gt; Edit Configurations
Press the + icon
create a new maven entry name it to springboot-run
change the command line input field to&lt;/p&gt;

&lt;p&gt;spring-boot:run&lt;/p&gt;

&lt;p&gt;hit apply/save.&lt;/p&gt;

&lt;p&gt;You are all set. Hit run.&lt;/p&gt;

&lt;p&gt;To see it in action go to your browser and visit url: &lt;a href=&#34;http://localhost:8080/department?companyId=Company1&#34;&gt;http://localhost:8080/department?companyId=Company1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Springboot deploy as WAR</title>
      <link>https://randyyaj.github.io/post/20161118_springboot_war/</link>
      <pubDate>Fri, 18 Nov 2016 20:52:19 -0400</pubDate>
      
      <guid>https://randyyaj.github.io/post/20161118_springboot_war/</guid>
      <description>&lt;p&gt;How to get springboot to deploy war instead of jar.&lt;/p&gt;

&lt;p&gt;pom.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
         
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;artifactId&amp;gt;your-artifact-id&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;groupId&amp;gt;your.group.id&amp;lt;/groupId&amp;gt;
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
    &amp;lt;name&amp;gt;${project.artifactId}&amp;lt;/name&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;your.tomcat.version&amp;gt;7.0.70&amp;lt;your.tomcat.version&amp;gt;
    &amp;lt;/properties&amp;gt;
         
    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.3.6.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
         
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;tomcat-coyote&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${your.tomcat.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;tomcat-catalina&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${your.tomcat.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Application.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootApplication(scanBasePackages=&amp;quot;your.package.name&amp;quot;)
@Import({BeanConfig.class})
public class Application extends SpringBootServletInitializer implements CommandLineRunner  {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
    }
    
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BeanConfig.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
public class BeanConfig {
    @Bean
    public EmbeddedServletContainerFactory servletContainer() {
        return new TomcatEmbeddedServletContainerFactory();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Godot Game Jam Free Assets</title>
      <link>https://randyyaj.github.io/post/20160322_inkscape/</link>
      <pubDate>Tue, 22 Mar 2016 18:13:01 -0400</pubDate>
      
      <guid>https://randyyaj.github.io/post/20160322_inkscape/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dl.dropboxusercontent.com/u/45209445/blog_posts/mouse_and_cheese_game.svg&#34;&gt;Download Assets Here&lt;/a&gt;
Right click to download SVG. Ad-Free you&amp;rsquo;re welcome!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no &lt;a href=&#34;http://www.2dgameartguru.com/&#34;&gt;Chris Hildenbrand&lt;/a&gt; but I made some assets
for the folks who need it competing in the &amp;ldquo;Mouse Theme&amp;rdquo; &lt;a href=&#34;https://itch.io/jam/godotjam032016&#34;&gt;Godot Engine Jam&lt;/a&gt;.
Was going for a Chip&amp;rsquo;s Challenge look. I also thought Rodent&amp;rsquo;s Revenge would have
been cool to make also.&lt;/p&gt;

&lt;p&gt;Assets are made in Inkscape feel free to modify or improve.
Assets are LICENSED under the PUBLIC DOMAIN. Do whatever with them as you please.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid&#34; src=&#34;https://dl.dropboxusercontent.com/u/45209445/blog_posts/assets.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GameDev - Bombs</title>
      <link>https://randyyaj.github.io/post/20160317_gamedev/</link>
      <pubDate>Thu, 17 Mar 2016 20:52:19 -0400</pubDate>
      
      <guid>https://randyyaj.github.io/post/20160317_gamedev/</guid>
      <description>&lt;p&gt;A Dactyl Clone I made using the Godot Engine. All code and assets are free for personal use.&lt;/p&gt;

&lt;p&gt;This game is OpenSauce(open source) please feel free to savor the goodness and share it with the world! All recipes and ingredients for this game is licensed under the GPL2 License.
Assets (Sound/Art) are licensed under the Creative Commons (&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;http://creativecommons.org/licenses/by/3.0/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/randyyaj/Bombs&#34;&gt;&lt;img class=&#34;img-fluid&#34; src=&#34;https://camo.githubusercontent.com/cd6000ed84a02c75d1713cc1dee26b5505861ac9/687474703a2f2f692e696d6775722e636f6d2f3052394b31564f2e706e673f312532303d31303578&#34; alt=&#34;Drawing&#34; style=&#34;width: 200px;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inkscape - Analysis of 2D Game Art (Denki Word Quest)</title>
      <link>https://randyyaj.github.io/post/20151014_inkscape/</link>
      <pubDate>Wed, 14 Oct 2015 17:43:46 -0400</pubDate>
      
      <guid>https://randyyaj.github.io/post/20151014_inkscape/</guid>
      <description>

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;In this post we will cover the art style of the game Word Quest made by Denki.
We will examine the artwork and then recreate it using Inkscape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copyright Disclaimer: I do not own the rights to Word Quest. All work done here is for the sole purpose of study.  All rights belong to it&amp;rsquo;s rightful owner(s). No copyright infringement intended.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dl.dropboxusercontent.com/u/45209445/blog_posts/denki_word_quest_breakdown.svg&#34;&gt;Download SVG&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;The image below is a picture of the game Word Quest. I will be showing you how to create the character,
the tree behind him, and also the rocks he is standing on.&lt;/p&gt;

&lt;p&gt;If you look carefully you can see that the tree is re-used through out the scene with very minor
detail add-ons. See the last tree on the right its the same tree.
Actually all of them are except the one funky tree that stands in the middle.
The artists scaled the same tree and reused it through out the scene without having to create new trees which saved both
time and money. The same goes for the rocks. If you look at all the rocks they vary in sizes and all look different.
However, with close examination, you can tell all the rocks are in fact the same.
They have just been scaled differently. Neat trick huh?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid&#34; src=&#34;http://i.ytimg.com/vi/azk9rFZJ_cs/maxresdefault.jpg&#34;&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-breakdown&#34;&gt;The Breakdown&lt;/h3&gt;

&lt;p&gt;In this section we will go into what I call the breakdown. I&amp;rsquo;ll show you the line art, color, and composition
used to create the game assets. I have also provided the svg file so that you can study it yourself.
The download link is located in the preface at the top. Although this artwork was probably made in illustrator
I dont have that kind of money to spare so I used inkscape instead. However, it should be easy enough to follow along
in your vector editor of choice.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-fluid&#34; src=&#34;https://dl.dropboxusercontent.com/u/45209445/blog_posts/word_quest_breakdown.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;As you can see the art is quite easy to mimic and also looks really cool. The artists did a great job stacking
together the different layers as it almost gives it a paper cut out effect. Another thing to note is the
water color like texture found on the grass and funky tree. You can achieve this look in inkscape using the
pattern/spray tool and move it around as you like with the tweak tool. I will cover those in future tutorials.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;If you enjoyed this game art breakdown and would like to see more please
leave a comment below. Stay tuned and thanks again for reading!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>