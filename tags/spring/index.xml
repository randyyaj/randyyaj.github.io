<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Don&#39;t Think Too Much</title>
    <link>https://randyyaj.github.io/tags/spring/index.xml</link>
    <description>Recent content on Don&#39;t Think Too Much</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://randyyaj.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring Boot and Vue.js</title>
      <link>https://randyyaj.github.io/post/20161129_vue_spring/</link>
      <pubDate>Tue, 29 Nov 2016 14:46:20 -0500</pubDate>
      
      <guid>https://randyyaj.github.io/post/20161129_vue_spring/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup&#34;&gt;Setup&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#structure&#34;&gt;Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parent&#34;&gt;Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frontend&#34;&gt;Front End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#backend&#34;&gt;Back End&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction-a-name-introduction-a&#34;&gt;Introduction &lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article is about creating a vuejs project that runs on top of spring boot. Many cool kids use node.js these days but I think java is  cool.&lt;/p&gt;

&lt;p&gt;If you simply hate reading and just want the source code you can find it here: &lt;a href=&#34;https://gitlab.com/randyyaj/SpringVue-Starter&#34;&gt;SpringVue Starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://gitlab.com/randyyaj/SpringVue-Starter.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation-a-name-installation-a&#34;&gt;Installation &lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In order to continue this project we will need to have the following items installed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node.js:latest&lt;/li&gt;
&lt;li&gt;npm:latest&lt;/li&gt;
&lt;li&gt;oracle java-jdk:1.8&lt;/li&gt;
&lt;li&gt;(Optional) A java IDE of your choice. I&amp;rsquo;m using intelliJ&lt;/li&gt;
&lt;li&gt;maven:latest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ubuntu 16.04&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install node
sudo apt-get install npm
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo apt-get install oracle-java8-set-default
npm install --global vue-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MacOSX El Capitan&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install node
brew install npm
brew update
brew tap caskroom/cask
brew install brew-cask
brew install Caskroom/cask/java
npm install --global vue-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-a-name-setup-a&#34;&gt;Setup &lt;a name=&#34;setup&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this section we will structure our vuejs/springboot app.
We will use maven reactor to manage our modules and setup our build correctly.&lt;/p&gt;

&lt;h3 id=&#34;structure-a-name-structure-a&#34;&gt;Structure &lt;a name=&#34;structure&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The base struture we want to create should look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app
├── frontend
│	├── pom.xml
├── backend
│	├── src
│	├── pom.xml
├── pom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parent-a-name-parent-a&#34;&gt;Parent &lt;a name=&#34;parent&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Create a new maven project called app. The directory should not contain anything other than a pom.xml file so delete anything else. Inside the app directory we will create two new modules called frontend and backend. The frontend directory will contain all frontend ui code. The backend directory will contain the backend java/spring services.&lt;/p&gt;

&lt;p&gt;Lets edit the parent pom - &lt;code&gt;app/pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.4.1.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;groupId&amp;gt;io.github.randyyaj&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;app&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    
    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;frontend&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;backend&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;main.basedir&amp;gt;${project.basedir}&amp;lt;/main.basedir&amp;gt;
    &amp;lt;/properties&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;frontend-a-name-frontend-a&#34;&gt;Frontend &lt;a name=&#34;frontend&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Next we are going to create our frontend module for our app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd app
vue init webpack frontend
cd frontend

#Install all dependencies
npm install

#Create a pom.xml file
touch pom.xml

#Run front end app on node server localhost:8080
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything went fine you should see an example vue app running on a node server on localhost:8080.
Kill the node server. Let&amp;rsquo;s create our pom.xml for the frontend module.&lt;/p&gt;

&lt;p&gt;In our pom.xml we are going to tell maven to install a local node and npm version using a maven plugin. The reason why is because some build servers will not have the same node/npm version as your app. We want to specify our own node version to build our app against it instead of using the build agents version.&lt;/p&gt;

&lt;p&gt;For more information about the plugin see &lt;a href=&#34;https://github.com/eirslett/frontend-maven-plugin&#34;&gt;https://github.com/eirslett/frontend-maven-plugin&lt;/a&gt;
&amp;gt;&amp;gt; &lt;em&gt;NOTE: If you are behind a corporate proxy you may need to define your own nodeDownloadRoot, npmDownloadRoot, and npm registry&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Edit the frontend pom.xml - &lt;code&gt;app/frontend/pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
  &amp;lt;parent&amp;gt;
    &amp;lt;artifactId&amp;gt;app&amp;lt;/artifactId&amp;gt;
    &amp;lt;groupId&amp;gt;io.gitlab.randyyaj&amp;lt;/groupId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;/parent&amp;gt;

  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;artifactId&amp;gt;frontend&amp;lt;/artifactId&amp;gt;

  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;com.github.eirslett&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;frontend-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;
        &amp;lt;executions&amp;gt;
          &amp;lt;!-- Install our node and npm version to run npm/node scripts--&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;install node and npm&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;install-node-and-npm&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;nodeVersion&amp;gt;v6.9.1&amp;lt;/nodeVersion&amp;gt;
              &amp;lt;npmVersion&amp;gt;3.10.9&amp;lt;/npmVersion&amp;gt;
              &amp;lt;nodeDownloadRoot&amp;gt;https://nodejs.org/dist/&amp;lt;/nodeDownloadRoot&amp;gt;
              &amp;lt;npmDownloadRoot&amp;gt;http://registry.npmjs.org/npm/-/&amp;lt;/npmDownloadRoot&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;

          &amp;lt;!-- Set NPM Registry --&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;npm set registry&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;npm&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;arguments&amp;gt;config set registry https://registry.npmjs.org&amp;lt;/arguments&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;

          &amp;lt;!-- Set SSL privilege --&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;npm set non-strict ssl&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;npm&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;!-- Optional configuration which provides for running any npm command --&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;arguments&amp;gt;config set strict-ssl false&amp;lt;/arguments&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;

          &amp;lt;!-- Install all project dependencies --&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;npm install&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;npm&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;!-- optional: default phase is &amp;quot;generate-resources&amp;quot; --&amp;gt;
            &amp;lt;phase&amp;gt;generate-resources&amp;lt;/phase&amp;gt;
            &amp;lt;!-- Optional configuration which provides for running any npm command --&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;arguments&amp;gt;install&amp;lt;/arguments&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;

          &amp;lt;!-- Build and minify static files --&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;npm run build&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;npm&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;arguments&amp;gt;run build&amp;lt;/arguments&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commonly, node projects will create a &lt;code&gt;dist/&lt;/code&gt; directory for final builds which contains the minified source code of the web app. In this case webpack is doing the work in minifying our frontend module. We are going to tell webpack to output the &lt;code&gt;dist/&lt;/code&gt; contents to &lt;code&gt;target/&lt;/code&gt;. I&amp;rsquo;ll go more into this later.&lt;/p&gt;

&lt;p&gt;locate the &lt;code&gt;app/frontend/config/index.js&lt;/code&gt; file and replace the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index: path.resolve(__dirname, &#39;../dist/index.html&#39;),
assetsRoot: path.resolve(__dirname, &#39;../dist&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index: path.resolve(__dirname, &#39;../target/dist/index.html&#39;),
assetsRoot: path.resolve(__dirname, &#39;../target/dist&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;backend-a-name-backend-a&#34;&gt;Backend &lt;a name=&#34;backend&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now that we have the frontend done lets move onto creating the backend.
We will create a new maven module inside &lt;code&gt;app/&lt;/code&gt; called &lt;code&gt;backend/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd app
mkdir backend
cd backend
mkdir -p src/main/resources
mkdir -p src/main/java/io/gitlab/randyyaj
mkdir -p src/test/java/io/gitlab/randyyaj
touch pom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember how we wanted to put the &lt;code&gt;dist/&lt;/code&gt; content into &lt;code&gt;target/&lt;/code&gt; in the frontend module? Well that&amp;rsquo;s because we are going to use a maven plugin to copy that into our &lt;code&gt;src/main/resources/public&lt;/code&gt; directory in our backend module. This directory is how tomcat knows how to run our frontend app.&lt;/p&gt;

&lt;p&gt;Edit the backend pom.xml - &lt;code&gt;app/backend/pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;artifactId&amp;gt;app&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;io.gitlab.randyyaj&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;artifactId&amp;gt;backend&amp;lt;/artifactId&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;

            &amp;lt;plugin&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;Copy App Content&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;generate-resources&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                        &amp;lt;configuration&amp;gt;
                            &amp;lt;outputDirectory&amp;gt;src/main/resources/public&amp;lt;/outputDirectory&amp;gt;
                            &amp;lt;overwrite&amp;gt;true&amp;lt;/overwrite&amp;gt;
                            &amp;lt;resources&amp;gt;
                                &amp;lt;resource&amp;gt;
                                    &amp;lt;directory&amp;gt;${project.parent.basedir}/frontend/target/dist&amp;lt;/directory&amp;gt;
                                    &amp;lt;includes&amp;gt;
                                        &amp;lt;include&amp;gt;static/&amp;lt;/include&amp;gt;
                                        &amp;lt;include&amp;gt;index.html&amp;lt;/include&amp;gt;
                                    &amp;lt;/includes&amp;gt;
                                &amp;lt;/resource&amp;gt;
                            &amp;lt;/resources&amp;gt;
                        &amp;lt;/configuration&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will now create a main class for spring boot to pick up and run:&lt;/p&gt;

&lt;p&gt;At this time your structure should look similar to this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree -L 2
app
├── README.md
├── backend
│   ├── pom.xml
│   ├── src
│   └── target
├── frontend
│   ├── README.md
│   ├── build
│   ├── config
│   ├── etc
│   ├── index.html
│   ├── node
│   ├── node_modules
│   ├── package.json
│   ├── pom.xml
│   ├── src
│   ├── static
│   ├── target
│   └── test
└── pom.xml

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-the-spring-boot-app-a-name-deploy-a&#34;&gt;Running the spring boot app &lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Now that we finished setting up our project we can run the app by executing the commands below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd app
mvn install
mvn --projects backend springboot:run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary-a-name-summary-a&#34;&gt;Summary &lt;a name=&#34;summary&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To sum things up we created a maven reactor project that has a parent pom. The parent pom captures all the modules under it and when we run &lt;code&gt;mvn install&lt;/code&gt; it will run any pom files in the module directories. The frontend module downloads a local npm and node executable, setups the registry and builds the app by minifying the source code and outputting it into the frontend&amp;rsquo;s &lt;code&gt;target/dist&lt;/code&gt; directory. The backend code then copies the dist/ directory&amp;rsquo;s contents and puts it into &lt;code&gt;src/main/resources/public&lt;/code&gt; where spring boots embeded tomcat will look for and serve when we startup our springboot app and visit localhost:8080.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>